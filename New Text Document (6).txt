%{ 
	#include <stdio.h>
	#include <math.h>
	extern int yylex();
	void yyerror();
	char* var_name[100];
	int var_val[100];
	int count,i;
	int flag;
%}

%union{
	int intVal;
	char* idVal;
	}
  
%token <intVal> NUMBER;
%token <idVal> ID;
%token  SQRT LOG;
%token  MINES MULT EQUAL PLUS DIVIDE OPEN CLOSE;
  
%left PLUS MINES;
  
%left MULT DIVIDE ;
  
%left OPEN CLOSE ;
  
%type <intVal> exp exp1 exp2 exp3 exp4 exp5 exp6 exp7 function
%% 
s:		exp{ printf("result: %d",$1)}
		|;
exp:	ID EQUAL exp1{
					for(i=0;i++;i<count+1)
					{
					if($1==var_name[i])
					{
						var_val[i]=$3;
						break;
					}
					else
					{
						if(i==count)
						{
							var_name[count]=$1;
							var_val[count]=$3;
							count++;
						}
						
					}
					}
					}
			|exp1 {$$=$1;};
exp1:		exp1 PLUS exp2{$$ = $1 + $3;}|exp2 {$$=$1;};
exp2:		exp2 MULT exp3{$$ = $1 * $3;}|exp3 {$$=$1;};
exp3:		exp3 DIVIDE exp4{ $$ = $1 / $3;}|exp4 {$$=$1;};
exp4:		exp4 MINES exp5{$$ = $1 - $3; }|exp5 {$$=$1;};
exp5:		OPEN exp6 CLOSE{$$ = $2;}|exp6 {$$=$1;};
exp6:		function OPEN exp1 CLOSE{if($1==1)
								{
									$$=sqrt($3);
								}
								else if($1==2)
								{
									$$=log($3);
								}
								}|exp7 {$$=$1;};
exp7:		NUMBER{$$=$1;};
			|ID{for(i=0;i++;i<100)
			{
				if($1==var_name[i])
				{
					$$=var_val[i];
				}
			}
			};
function:	LOG{$$=1;}
			|SQRT{$$=2;};
  
%% 
  
//driver code 
void main() 
{ 
   printf("\nEnter your phrase( enter ans to see the result) :\n"); 
  count=0;
  flag=0;
   yyparse(); 
   if(flag==0) 
   printf("\nEntered arithmetic expression is Valid\n\n"); 
} 
  
void yyerror() 
{  
   flag=1; 
} 
